// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.2
// source: peers/v1/peers.proto

package peers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PeerManagement_GetPeers_FullMethodName = "/honu.peers.v1.PeerManagement/GetPeers"
	PeerManagement_AddPeers_FullMethodName = "/honu.peers.v1.PeerManagement/AddPeers"
	PeerManagement_RmPeers_FullMethodName  = "/honu.peers.v1.PeerManagement/RmPeers"
)

// PeerManagementClient is the client API for PeerManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PeerManagement provides a simple interface for administrators to debug the
// anti-entropy network and to manage services. Note that administrators can also use
// Gossip to perform the same requests, but this service simplifies things.
type PeerManagementClient interface {
	GetPeers(ctx context.Context, in *PeersFilter, opts ...grpc.CallOption) (*PeersList, error)
	AddPeers(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*PeersStatus, error)
	RmPeers(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*PeersStatus, error)
}

type peerManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerManagementClient(cc grpc.ClientConnInterface) PeerManagementClient {
	return &peerManagementClient{cc}
}

func (c *peerManagementClient) GetPeers(ctx context.Context, in *PeersFilter, opts ...grpc.CallOption) (*PeersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersList)
	err := c.cc.Invoke(ctx, PeerManagement_GetPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagementClient) AddPeers(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*PeersStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersStatus)
	err := c.cc.Invoke(ctx, PeerManagement_AddPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagementClient) RmPeers(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*PeersStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersStatus)
	err := c.cc.Invoke(ctx, PeerManagement_RmPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerManagementServer is the server API for PeerManagement service.
// All implementations must embed UnimplementedPeerManagementServer
// for forward compatibility
//
// PeerManagement provides a simple interface for administrators to debug the
// anti-entropy network and to manage services. Note that administrators can also use
// Gossip to perform the same requests, but this service simplifies things.
type PeerManagementServer interface {
	GetPeers(context.Context, *PeersFilter) (*PeersList, error)
	AddPeers(context.Context, *Peer) (*PeersStatus, error)
	RmPeers(context.Context, *Peer) (*PeersStatus, error)
	mustEmbedUnimplementedPeerManagementServer()
}

// UnimplementedPeerManagementServer must be embedded to have forward compatible implementations.
type UnimplementedPeerManagementServer struct {
}

func (UnimplementedPeerManagementServer) GetPeers(context.Context, *PeersFilter) (*PeersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedPeerManagementServer) AddPeers(context.Context, *Peer) (*PeersStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeers not implemented")
}
func (UnimplementedPeerManagementServer) RmPeers(context.Context, *Peer) (*PeersStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmPeers not implemented")
}
func (UnimplementedPeerManagementServer) mustEmbedUnimplementedPeerManagementServer() {}

// UnsafePeerManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerManagementServer will
// result in compilation errors.
type UnsafePeerManagementServer interface {
	mustEmbedUnimplementedPeerManagementServer()
}

func RegisterPeerManagementServer(s grpc.ServiceRegistrar, srv PeerManagementServer) {
	s.RegisterService(&PeerManagement_ServiceDesc, srv)
}

func _PeerManagement_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagementServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerManagement_GetPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagementServer).GetPeers(ctx, req.(*PeersFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManagement_AddPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagementServer).AddPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerManagement_AddPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagementServer).AddPeers(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManagement_RmPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagementServer).RmPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerManagement_RmPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagementServer).RmPeers(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerManagement_ServiceDesc is the grpc.ServiceDesc for PeerManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "honu.peers.v1.PeerManagement",
	HandlerType: (*PeerManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeers",
			Handler:    _PeerManagement_GetPeers_Handler,
		},
		{
			MethodName: "AddPeers",
			Handler:    _PeerManagement_AddPeers_Handler,
		},
		{
			MethodName: "RmPeers",
			Handler:    _PeerManagement_RmPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peers/v1/peers.proto",
}
