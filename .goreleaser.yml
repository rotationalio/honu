project_name: honu
dist: dist
builds:
  # Define multiple builds as a yaml list, specify by a unique id
  - id: "cmd-honu-build"
    dir: .
    main: ./cmd/honu
    binary: honu
    flags:
      - -v
    ldflags: -s -w -X github.com/rotationalio/honu.GitVersion={{.Commit}} -X github.com/rotationalio/honu.BuildDate={{.Date}}
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    goarm:
      - "6"
    ignore:
      - goos: linux
        goarch: arm64
      - goos: darwin
        goarch: amd64

    mod_timestamp: '{{ .CommitTimestamp }}'

archives:
  - id: "honu-archive-tgz"
    format: tar.gz
    builds:
      - "cmd-honu-build"
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    wrap_in_directory: true
    files:
      - LICENSE
      - README.md

# Publish the release on GitHub
release:
  # Repo in which the release will be created.
  # Default is extracted from the origin remote URL or empty if its private hosted.
  # Valid options are either github, gitlab or gitea
  github:
    owner: rotationalio
    name: honu

  # You can change the name of the release.
  name_template: 'Honu v{{.Version}}'

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  prerelease: auto

  # Header for the release body.
  header: |
    [TODO: describe release]
  # Footer for the release body.
  footer: |
    ### About

    Honu is distributed key-value store that is intended for large systems of replicas
    that are distributed across the globe. Honu provides an eventually consistent
    replication semantic that uses reinforcement learning to optimize replication to
    lower both costs and the instances of stale reads and write forks. If you're
    interested in this project, please see https://geodistributed.systems for more.

  # If set to true, will not auto-publish the release.
  disable: false

changelog:
  filters:
    # Commit messages matching the regexp listed here will be removed from the changelog
    exclude:
      - (?i)typo
      - (?i)^f$

# Store signed source code with release
source:
  enabled: true
  format: 'zip'
  name_template: '{{ .ProjectName }}_v{{ .Version }}_source'

# Used to validate if downloaded files are correct
checksum:
  name_template: '{{ .ProjectName }}_{{ .Version }}_checksums.txt'
  algorithm: sha256

signs:
  - artifacts: checksum
    args: ["--batch", "-u", "{{ .Env.GPG_FINGERPRINT }}", "--output", "${signature}", "--detach-sign", "${artifact}"]