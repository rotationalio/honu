// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: honu/v1/honu.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Honu_Get_FullMethodName    = "/honu.v1.Honu/Get"
	Honu_Put_FullMethodName    = "/honu.v1.Honu/Put"
	Honu_Delete_FullMethodName = "/honu.v1.Honu/Delete"
	Honu_Iter_FullMethodName   = "/honu.v1.Honu/Iter"
	Honu_Batch_FullMethodName  = "/honu.v1.Honu/Batch"
	Honu_Cursor_FullMethodName = "/honu.v1.Honu/Cursor"
	Honu_Sync_FullMethodName   = "/honu.v1.Honu/Sync"
	Honu_Count_FullMethodName  = "/honu.v1.Honu/Count"
	Honu_Status_FullMethodName = "/honu.v1.Honu/Status"
)

// HonuClient is the client API for Honu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HonuClient interface {
	// Get is a unary request to retrieve a value for a key.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// Put is a unary request to store a value for a key.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	// Delete is a unary request to remove a value and key.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	// Iter is a unary request that returns a completely materialized list of key value pairs.
	Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (*IterReply, error)
	// Batch is a client-side streaming request to issue multiple commands, usually Put and Delete.
	Batch(ctx context.Context, opts ...grpc.CallOption) (Honu_BatchClient, error)
	// Cursor is a server-side streaming request to iterate in a memory safe fashion.
	Cursor(ctx context.Context, in *CursorRequest, opts ...grpc.CallOption) (Honu_CursorClient, error)
	// Sync is a bi-directional streaming mechanism to issue access requests synchronously.
	Sync(ctx context.Context, opts ...grpc.CallOption) (Honu_SyncClient, error)
	// Count the number of objects currently stored in the database
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error)
	// This RPC servers as a health check for clients to make sure the server is online.
	Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServerStatus, error)
}

type honuClient struct {
	cc grpc.ClientConnInterface
}

func NewHonuClient(cc grpc.ClientConnInterface) HonuClient {
	return &honuClient{cc}
}

func (c *honuClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, Honu_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *honuClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, Honu_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *honuClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, Honu_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *honuClient) Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (*IterReply, error) {
	out := new(IterReply)
	err := c.cc.Invoke(ctx, Honu_Iter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *honuClient) Batch(ctx context.Context, opts ...grpc.CallOption) (Honu_BatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Honu_ServiceDesc.Streams[0], Honu_Batch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &honuBatchClient{stream}
	return x, nil
}

type Honu_BatchClient interface {
	Send(*BatchRequest) error
	CloseAndRecv() (*BatchReply, error)
	grpc.ClientStream
}

type honuBatchClient struct {
	grpc.ClientStream
}

func (x *honuBatchClient) Send(m *BatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *honuBatchClient) CloseAndRecv() (*BatchReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *honuClient) Cursor(ctx context.Context, in *CursorRequest, opts ...grpc.CallOption) (Honu_CursorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Honu_ServiceDesc.Streams[1], Honu_Cursor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &honuCursorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Honu_CursorClient interface {
	Recv() (*KVPair, error)
	grpc.ClientStream
}

type honuCursorClient struct {
	grpc.ClientStream
}

func (x *honuCursorClient) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *honuClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Honu_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Honu_ServiceDesc.Streams[2], Honu_Sync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &honuSyncClient{stream}
	return x, nil
}

type Honu_SyncClient interface {
	Send(*SyncRequest) error
	Recv() (*SyncReply, error)
	grpc.ClientStream
}

type honuSyncClient struct {
	grpc.ClientStream
}

func (x *honuSyncClient) Send(m *SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *honuSyncClient) Recv() (*SyncReply, error) {
	m := new(SyncReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *honuClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, Honu_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *honuClient) Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, Honu_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HonuServer is the server API for Honu service.
// All implementations must embed UnimplementedHonuServer
// for forward compatibility
type HonuServer interface {
	// Get is a unary request to retrieve a value for a key.
	Get(context.Context, *GetRequest) (*GetReply, error)
	// Put is a unary request to store a value for a key.
	Put(context.Context, *PutRequest) (*PutReply, error)
	// Delete is a unary request to remove a value and key.
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	// Iter is a unary request that returns a completely materialized list of key value pairs.
	Iter(context.Context, *IterRequest) (*IterReply, error)
	// Batch is a client-side streaming request to issue multiple commands, usually Put and Delete.
	Batch(Honu_BatchServer) error
	// Cursor is a server-side streaming request to iterate in a memory safe fashion.
	Cursor(*CursorRequest, Honu_CursorServer) error
	// Sync is a bi-directional streaming mechanism to issue access requests synchronously.
	Sync(Honu_SyncServer) error
	// Count the number of objects currently stored in the database
	Count(context.Context, *CountRequest) (*CountReply, error)
	// This RPC servers as a health check for clients to make sure the server is online.
	Status(context.Context, *HealthCheck) (*ServerStatus, error)
	mustEmbedUnimplementedHonuServer()
}

// UnimplementedHonuServer must be embedded to have forward compatible implementations.
type UnimplementedHonuServer struct {
}

func (UnimplementedHonuServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHonuServer) Put(context.Context, *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedHonuServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHonuServer) Iter(context.Context, *IterRequest) (*IterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Iter not implemented")
}
func (UnimplementedHonuServer) Batch(Honu_BatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedHonuServer) Cursor(*CursorRequest, Honu_CursorServer) error {
	return status.Errorf(codes.Unimplemented, "method Cursor not implemented")
}
func (UnimplementedHonuServer) Sync(Honu_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedHonuServer) Count(context.Context, *CountRequest) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedHonuServer) Status(context.Context, *HealthCheck) (*ServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedHonuServer) mustEmbedUnimplementedHonuServer() {}

// UnsafeHonuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HonuServer will
// result in compilation errors.
type UnsafeHonuServer interface {
	mustEmbedUnimplementedHonuServer()
}

func RegisterHonuServer(s grpc.ServiceRegistrar, srv HonuServer) {
	s.RegisterService(&Honu_ServiceDesc, srv)
}

func _Honu_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Honu_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Honu_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Honu_Iter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Iter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Iter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Iter(ctx, req.(*IterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Honu_Batch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HonuServer).Batch(&honuBatchServer{stream})
}

type Honu_BatchServer interface {
	SendAndClose(*BatchReply) error
	Recv() (*BatchRequest, error)
	grpc.ServerStream
}

type honuBatchServer struct {
	grpc.ServerStream
}

func (x *honuBatchServer) SendAndClose(m *BatchReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *honuBatchServer) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Honu_Cursor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CursorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HonuServer).Cursor(m, &honuCursorServer{stream})
}

type Honu_CursorServer interface {
	Send(*KVPair) error
	grpc.ServerStream
}

type honuCursorServer struct {
	grpc.ServerStream
}

func (x *honuCursorServer) Send(m *KVPair) error {
	return x.ServerStream.SendMsg(m)
}

func _Honu_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HonuServer).Sync(&honuSyncServer{stream})
}

type Honu_SyncServer interface {
	Send(*SyncReply) error
	Recv() (*SyncRequest, error)
	grpc.ServerStream
}

type honuSyncServer struct {
	grpc.ServerStream
}

func (x *honuSyncServer) Send(m *SyncReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *honuSyncServer) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Honu_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Honu_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonuServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Honu_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonuServer).Status(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Honu_ServiceDesc is the grpc.ServiceDesc for Honu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Honu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "honu.v1.Honu",
	HandlerType: (*HonuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Honu_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Honu_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Honu_Delete_Handler,
		},
		{
			MethodName: "Iter",
			Handler:    _Honu_Iter_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Honu_Count_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Honu_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Batch",
			Handler:       _Honu_Batch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Cursor",
			Handler:       _Honu_Cursor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _Honu_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "honu/v1/honu.proto",
}
