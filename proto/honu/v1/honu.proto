syntax = "proto3";

package honu.v1;
option go_package = "github.com/rotationalio/honu/api";


service Honu {
    // Get is a unary request to retrieve a value for a key.
    rpc Get(GetRequest) returns (GetReply) {};

    // Put is a unary request to store a value for a key.
    rpc Put(PutRequest) returns (PutReply) {};

    // Delete is a unary request to remove a value and key.
    rpc Delete(DeleteRequest) returns (DeleteReply) {};

    // Iter is a unary request that returns a completely materialized list of key value pairs.
    rpc Iter(IterRequest) returns (IterReply) {};

    // Batch is a client-side streaming request to issue multiple commands, usually Put and Delete.
    rpc Batch(stream BatchRequest) returns (BatchReply) {};

    // Cursor is a server-side streaming request to iterate in a memory safe fashion.
    rpc Cursor(CursorRequest) returns (stream KVPair) {};

    // Sync is a bi-directional streaming mechanism to issue access requests synchronously.
    rpc Sync(stream SyncRequest) returns (stream SyncReply) {};

    // Count the number of objects currently stored in the database
    rpc Count(CountRequest) returns (CountReply) {};

    // This RPC servers as a health check for clients to make sure the server is online.
    rpc Status(HealthCheck) returns (ServerStatus) {};
}


message GetRequest {
    bytes key = 1;
    string namespace = 2;
    Options options = 3;
}

message GetReply {
    bytes value = 1;
    Meta meta = 2;          // will only be supplied if return_meta=true in options
}

message PutRequest {
    bytes key = 1;
    bytes value = 2;
    string namespace = 3;
    Options options = 4;
}

message PutReply {
    bool success = 1;
    Meta meta = 2;          // will only be supplied if return_meta=true in options
}

message DeleteRequest {
    bytes key = 1;
    string namespace = 2;
    Options options = 3;    // if return_meta=true then the meta of the version deleted is returned
}

message DeleteReply {
    bool success = 1;
    Meta meta = 2;          // will only be supplied if return_meta=true in options
}

message IterRequest {
    bytes prefix = 1;       // the prefix to range over, if nil all objects are returned
    string namespace = 2;
    Options options = 3;
}

message IterReply {
    repeated KVPair values = 1;
    string next_page_token = 2;
}

message BatchRequest {
    int64 id = 1;
    oneof request {
        PutRequest put = 2;
        DeleteRequest delete = 3;
    }
}

message BatchReply {
    message Error {
        int64 id = 1;
        string error = 2;
    }

    int64 operations = 1;
    int64 successful = 2;
    int64 failed = 3;
    repeated Error errors = 4;
}

message CursorRequest {
    bytes prefix = 1;       // the prefix to range over, if nil all objects are returned
    bytes seek_key = 2;     // a key to seekto within the prefix (optional)
    string namespace = 3;
    Options options = 4;
}

message SyncRequest {
    int64 id = 1;
    oneof request {
        GetRequest get = 2;
        PutRequest put = 3;
        DeleteRequest delete = 4;
        IterRequest iter = 5;
    }
}

message SyncReply {
    int64 id = 1;
    bool success = 2;
    string error = 3;
    oneof reply {
        GetReply get = 4;
        PutReply put = 5;
        DeleteReply delete = 6;
        IterReply iter = 7;
    }
}

message CountRequest {
    bytes prefix = 1;       // the prefix to range over, if nil all objects are counted
    bytes seek_key = 2;     // a key to seekto within the prefix (optional)
    string namespace = 3;
}

message CountReply {
    uint64 objects = 1;      // the number of objects in the iterator
    uint64 key_bytes = 2;    // the number of bytes used for keys
    uint64 object_bytes = 3; // the number of bytes used for objects
}

message HealthCheck {}

message ServerStatus {
    string status = 1;
    string version = 2;
    string uptime = 3;
    ReplicaStatus replica = 15;
}

message ReplicaStatus {
    bool enabled = 1;
    uint64 pid = 2;
    string region = 3;
    string name = 4;
    string interval = 5;
    string sigma = 6;
}

// Options conditions all accesses to trtl, e.g. there are not different structs for
// Get vs Put options. The semantics of each option depends on the type of request.
message Options {
    bool return_meta = 1;     // generally, return the version information for the object in the response
    bool iter_no_keys = 2;    // do not include keys in an Iter or Cursor response, to reduce data transfer load
    bool iter_no_values = 3;  // do not include values in an Iter or Cursor response, to reduce data transfer load
    string page_token = 4;    // specify the page token to fetch the next page of results
    int32 page_size = 5;      // specify the number of results per page, cannot change between page requests
}

// A key/value pair that is returned in Iter and Cursor requests
message KVPair {
    bytes key = 1;
    bytes value = 2;
    string namespace = 3;
    Meta meta = 4;
}

// Meta is a simplified representation of the honu.object.v1.Object metadata that trtl
// actually stores. The simplification is intended to return non-nested data version
// information to the user in a read-only fashion.
message Meta {
    bytes key = 1;          // the key that the metadata describes
    string namespace = 2;   // a unique namespace of the key, usually a prefix
    string region = 3;      // the region in which the data originated
    string owner = 4;       // the name of the replica where the data originated
    Version version = 5;    // the current conflict-free version of the data
    Version parent = 6;     // the version the current data was was derived from
}

message Version {
    uint64 pid = 1;         // process id, used for conflict-free version comparisons
    uint64 version = 2;     // a monotonically increasing scalar that describes changes in the record
    string region = 3;      // the region where the version originated
}