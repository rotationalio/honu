syntax = "proto3";

package honu.peers.v1;
option go_package = "github.com/rotationalio/honu/peers";

// Peer contains metadata about how to connect to remote peers in the directory service
// network. This message services as a data-transfer and exchange mechanism for dynamic
// networks with changing membership.
message Peer {
    uint64 id = 1;                   // the process id of the peer must be unique in the network; used for distributed versions
    string addr = 2;                 // the network address to connect to the peer on (don't forget the port!)
    string name = 3;                 // optional - a unique, human readable name for the peer
    string region = 4;               // optional? - the region the peer is running in

    // Logging information timestamps
    string created = 9;
    string modified = 10;

    // extra information that might be relevant to process-specific functions; e.g. for
    // specific clouds or data that's been parsed (optional).
    map<string, string> extra = 14;
}

// PeerManagement provides a simple interface for administrators to debug the
// anti-entropy network and to manage services. Note that administrators can also use
// Gossip to perform the same requests, but this service simplifies things.
service PeerManagement {
    rpc GetPeers(PeersFilter) returns (PeersList) {};
    rpc AddPeers(Peer) returns (PeersStatus) {};
    rpc RmPeers(Peer) returns (PeersStatus) {};
}

// Used to filter the peers that are returned. If no filters are specified then all
// known peers on the remote replica are returned.
message PeersFilter {
    repeated string region = 1;      // Specify the region(s) to return the peers for. Only effects PeersList not PeersStatus
    bool status_only = 2;            // Return only the peers status, not a list of peers.
}

// Returns the list of peers currently known to the replica and its peer management status.
message PeersList {
    repeated Peer peers = 1;
    PeersStatus status = 2;
}

// A response to a peer management command that describes the current state of the network.
message PeersStatus {
    int64 network_size = 1;          // The total number of peers known to the replica (including itself)
    map<string, int64> regions = 2;  // The number of peers known to the replica per known region
    string last_synchronization = 3; // The timestamp of the last synchronization that exchanged data
}