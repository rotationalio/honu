package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
)

//go:generate go run .

const (
	charsetPath  = "charset.proto"
	ianaCharSets = "https://www.iana.org/assignments/character-sets/character-sets-1.csv"
)

func main() {
	var (
		f        *os.File
		err      error
		charsets []string
		values   []int32
	)

	if charsets, values, err = fetchCharSets(); err != nil {
		exit(fmt.Errorf("could not fetch charsets: %w", err))
	}

	if f, err = os.Create(charsetPath); err != nil {
		exit(fmt.Errorf("could not open %s: %w", charsetPath, err))
	}
	defer f.Close()

	if err = writeProtobuf(f, charsets, values); err != nil {
		exit(fmt.Errorf("could not write generated protobofu file: %w", err))
	}
}

func fetchCharSets() (charsets []string, values []int32, err error) {
	var req *http.Request
	if req, err = http.NewRequest(http.MethodGet, ianaCharSets, nil); err != nil {
		return nil, nil, err
	}

	var rep *http.Response
	if rep, err = http.DefaultClient.Do(req); err != nil {
		return nil, nil, err
	}

	if rep.StatusCode != http.StatusOK {
		return nil, nil, fmt.Errorf("[%d] %s", rep.StatusCode, http.StatusText(rep.StatusCode))
	}
	defer rep.Body.Close()

	reader := csv.NewReader(rep.Body)
	charsets = []string{"UNDEFINED"}
	values = []int32{0}

	// Read the first row from the reader to remove the fields
	reader.Read()

csvReader:
	for {
		var row []string
		if row, err = reader.Read(); err != nil {
			if err == io.EOF {
				break csvReader
			} else {
				return nil, nil, err
			}
		}

		var name string
		switch {
		case row[0] != "":
			name = row[0]
		case row[1] != "":
			name = row[1]
		default:
			continue csvReader
		}

		charsets = append(charsets, normalizeName(name))

		var value int32
		if value, err = parseInt32(row[2]); err != nil {
			return nil, nil, err
		}

		values = append(values, value)
	}

	return charsets, values, nil
}

func normalizeName(name string) string {
	name = strings.ToUpper(strings.TrimSpace(name))
	name = strings.ReplaceAll(name, "-", "_")
	name = strings.ReplaceAll(name, " ", "_")
	name = strings.ReplaceAll(name, ":", "_")
	name = strings.ReplaceAll(name, ".", "_")
	name = strings.ReplaceAll(name, "(", "")
	name = strings.ReplaceAll(name, ")", "")
	name = strings.ReplaceAll(name, "__", "_")

	return name
}

func parseInt32(s string) (_ int32, err error) {
	if s == "" {
		return 0, nil
	}

	var i int64
	if i, err = strconv.ParseInt(s, 10, 32); err != nil {
		return 0, err
	}
	return int32(i), nil
}

const padbuf = 24

func writeProtobuf(w io.Writer, charsets []string, values []int32) (err error) {
	if _, err = fmt.Fprint(w, GenFileHeader); err != nil {
		return err
	}

	for i := 0; i < len(charsets); i++ {
		klen := len(charsets[i])

		var pad string
		if klen < padbuf {
			pad = strings.Repeat(" ", padbuf-klen)
		}

		if _, err = fmt.Fprintf(w, "    %s%s = %d;\n", charsets[i], pad, values[i]); err != nil {
			return fmt.Errorf("could not write line: %w", err)
		}
	}

	if _, err = fmt.Fprint(w, "}"); err != nil {
		return err
	}

	return nil
}

const GenFileHeader = `// Code generated by proto/mimetype/v1/generate.go DO NOT EDIT.
syntax = "proto3";

package mimetype.v1;

option go_package = "github.com/rotationalio/honu/mimetype";

// CharSet defines the character set used in text based encoding. If the CharSet is not
// specified, it is assumed to be UTF-8. These CharSets are defined by the IANA
// character set assignments at
// https://www.iana.org/assignments/character-sets/character-sets.xhtml
//
// NOTE: not all character sets may be supported by the server and must be supported by
// clients of the database if an unsupport charset is used.
enum CharSet {
`

func exit(err error) {
	fmt.Fprintln(os.Stderr, err.Error())
	os.Exit(1)
}
