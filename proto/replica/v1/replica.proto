syntax = "proto3";

package honu.replica.v1;
option go_package = "github.com/rotationalio/honu/replica";

import "object/v1/object.proto";

// The Replication Service implements a gossip-based anti-entropy protocol for
// synchronizing replicas around the world. Honu expects total replication, meaning
// all replicas will have a copy of all replicated data (although some data won't be
// replicated). Not only is the Replication service is the mechanism by which data is
// exchanged, but also network membership and discovery. Every replica should
// periodically perform anti-entropy via the Gossip RPC with a randomly selected peer,
// and update its data store via a "latest writer wins"policy.
//
// The Replication Service requires mTLS authentication in order to conduct exchanges.
service Replication {
    // Gossip implements biltateral anti-entropy: during a Gossip session the initiating
    // replica pushes updates to the remote peer and pulls requested changes. Using
    // bidirectional streaming, the initiating peer sends data-less sync messages with
    // the versions of objects it stores locally. The remote replica then responds with
    // data if its local version is later or sends a sync message back requesting the
    // data from the initating replica if its local version is earlier (no exchange)
    // occurs if both replicas have the same version. At the end of a gossip session,
    // both replicas should have synchronized and have identical underlying data stores.
    rpc Gossip(stream Sync) returns (stream Sync) {}
}

// Sync messages allow replicas to exchange information in a bidirectional stream.
// Because Sync messages are sent in the stream, there are different synchronization
// types. A "check" synchronization sends only the version vector without data,
// requesting the remote peer to check if they have a later version, and if so, return
// it. A "repair" synchronization sends object data back if the sender's version is
// later. A "complete" synchronization indicates that the sender is fully synchronized,
// and an "error" synchronization message says that there was some failure repairing
// the specified version vector.
message Sync {
    // Status indicates what state the synchronization is in between peers, allowing
    // the replicas to coordinate between multiple sync messages in a grpc stream.
    enum Status {
        UNKNOWN = 0;                   // Should not be used as a status
        CHECK = 1;                     // Sync contains version information only
        REPAIR = 2;                    // Sync contains object data information
        COMPLETE = 3;                  // Sync contains no object information, ready to end Gossip
        ERROR = 4;                     // Sync contains object-specific error information
    }

    Status status = 1;                 // The status/type of sync messages
    honu.object.v1.Object object = 2;  // The object being synchronized
    string error = 3;                  // Error information if the object failed to sync
}