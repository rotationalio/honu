syntax = "proto3";

package object.v1;

import "google/protobuf/timestamp.proto";

message Object {
    Version version = 1;
    SchemaVersion schema = 2;
    string mimetype = 3;

    // Access Controls
    bytes owner = 4;
    bytes group = 5;
    bytes permissions = 6;
    repeated ACL acl = 7;

    // Provenance Information
    repeated string WriteRegions = 8;
    Publisher publisher = 9;

    // Read Information
    Encryption encryption = 10;
    Compression compression = 11;

    // Flags
    bytes flags = 12;

    // Modification Timestamps
    google.protobuf.Timestamp created = 13;
    google.protobuf.Timestamp modified = 14;

    // The actual data of the object
    bytes data = 15;
}

// Implements a geo-distributed version as a Lamport Scalar
message Version {
  uint64 pid = 1;       // Process ID - used to deconflict ties in the version number.
  uint64 version = 2;   // Montonically increasing version number.
  string region = 3;    // The region where the change occurred to track multi-region handling.
  Version parent = 4;   // In order to get a complete version history, identify the predessor; for compact data transfer parent should not be defined in parent version.
  bool tombstone = 5;   // Set to true in order to mark the object as deleted

  // The timestamp that the version was created (e.g. the last modified date).
  google.protobuf.Timestamp created = 15;
}

// An event type is composed of a name and a version so that the type can be looked up
// in the schema registry. The schema can then be used to validate the data inside the
// event. Schemas are optional but types are not unless the mimetype requries a schema
// for deserialization (e.g. protobuf, parquet, avro, etc.).
message SchemaVersion {
    string name = 1;
    uint32 major_version = 2;
    uint32 minor_version = 3;
    uint32 patch_version = 4;
}

message ACL {
    bytes client_id = 1;
    bytes permissions = 2;
}

// Metadata about the cryptography used to secure the event.
message Encryption {
    enum Algorithm {
        // No cryptography is being used
        PLAINTEXT = 0;

        // Encryption Algorithms
        AES256_GCM = 110;
        AES192_GCM = 120;
        AES128_GCM = 130;

        // Signature Algorithms
        HMAC_SHA256 = 310;

        // Sealing Algorithms (Asymmetric)
        RSA_OAEP_SHA512 = 510;
    }

    string public_key_id = 1;
    bytes encryption_key = 2;
    bytes hmac_secret = 3;
    bytes signature = 4;
    Algorithm sealing_algorithm = 5;
    Algorithm encryption_algorithm = 6;
    Algorithm signature_algorithm = 7;
}

// Metadata about compression used to reduce the storage size of the event.
message Compression {
    enum Algorithm {
        NONE = 0;
        GZIP = 1;
        COMPRESS = 2;
        DEFLATE = 3;
        BROTLI = 4;
    }

    Algorithm algorithm = 1;
    int64 level = 2;
}

// Information about the publisher of the event for provenance and auditing purposes.
message Publisher {
    bytes publisher_id = 1;
    bytes client_id = 2;
    string ip_addr = 3;
    string user_agent = 4;
}